{
  "console.log": {
    "scope": "javascript,typescript,javascriptreact",
    "prefix": "cl",
    "body": "console.log($1);"
  },

  "console.debug": {
    "scope": "javascript,typescript,javascriptreact",
    "prefix": "cd",
    "body": "console.debug($1);"
  },

  "lambda": {
    "scope": "javascript, typescript,javascriptreact",
    "prefix": "l",
    "body": ["($1) =>", "{$2}"]
  },

  "async lambda": {
    "scope": "javascript, typescript,javascriptreact",
    "prefix": "al",
    "body": ["async ($1) => {", "\t$2", "}"]
  },

  "express request lambda": {
    "scope": "typescript",
    "prefix": "req",
    "body": ["async (req: Request, res: Response) => {", "\t$2", "}"]
  },

  "express request lambda with next": {
    "scope": "typescript",
    "prefix": "next",
    "body": [
      "async (req: Request, res: Response, next: NextFunction) => {",
      "\t$2",
      "}"
    ]
  },

  "jest it request example": {
    "scope": "typescript, jest",
    "prefix": "it",
    "body": ["it(\"$1\", async () => {", " \t$2", "});"]
  }
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
}
